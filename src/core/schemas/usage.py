from typing import Literal
from pydantic import BaseModel, Field


class LABOUsageStatistics(BaseModel):
    """
    Represents usage statistics for an agent or language model within the LABO system.

    This class is designed to hold key metrics that describe how an agent or language model is being used.
    It includes details such as the number of tokens generated, the number of tokens in the prompt, the total
    number of tokens processed, and the number of steps taken by the agent. These statistics can be useful
    for monitoring usage, analyzing performance, and managing resource consumption.

    Attributes:
    - `message_type`: A literal value that is fixed as `"usage_statistics"`. This serves as an identifier for
                      the type of message or data this object represents. It helps in distinguishing these
                      usage statistics from other types of data that might be passed around in the system.
    - `completion_tokens`: An integer representing the number of tokens generated by the agent as part of its
                           completion or response. This could be used to understand the output size of the
                           agent's operations.
    - `prompt_tokens`: An integer representing the number of tokens in the input prompt provided to the agent.
                       This gives an idea of the complexity or length of the initial input.
    - `total_tokens`: An integer representing the sum of the `prompt_tokens` and `completion_tokens`, which
                      gives the overall number of tokens processed by the agent during an operation.
    - `step_count`: An integer representing the number of steps taken by the agent. The specific meaning of
                    a "step" would depend on the context of how the agent operates, but it could refer to
                    individual actions, iterations, or decision points in its processing.
    """
    message_type: Literal["usage_statistics"] = "usage_statistics"
    completion_tokens: int = Field(0, description="The number of tokens generated by the agent.")
    prompt_tokens: int = Field(0, description="The number of tokens in the prompt.")
    total_tokens: int = Field(0, description="The total number of tokens processed by the agent.")
    step_count: int = Field(0, description="The number of steps taken by the agent.")